plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.likelion'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

ext { //snippet 생성 위치 지정
    snippetsDir = file('build/generated-snippets')
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.0')
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //asciidoc, mockmvc
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //querydsl dependencies 추가(스프링부트 3.0 이상)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

asciidoctor.doFirst { //폴더 비우기
    println("---------------- delete present asciidoctor.")
    delete file('src/main/resources/static/docs')
}

//asciidoctor 작업 구성
asciidoctor {
    inputs.dir snippetsDir
    //snippets 디렉토리를 input 디렉토리로 설정
    //asciidoctor가 사용할 input 파일들의 위치가 사전에 정해준 snippetsDir에 존재
    configurations 'asciidoctorExtensions'
    dependsOn test //build 시 test 작업 이후에 asciidoctor 수행
}

asciidoctor.doLast { //결과 출력
    println("---------------- asciidoctor is deleted!")
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc") //build 시
    into file("src/main/resources/static/docs") //html 생성
}

tasks.named('test') {
    outputs.dir snippetsDir //snippet 디렉토리 출력으로 작업하도록 설정
    useJUnitPlatform()
}

build { //의존작업 명시
    dependsOn copyDocument
}

bootJar {
    //boot 실행 시 asciidoctor.outputDir의 html 파일을 into 다음의 경로 아래로 복사
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into "src/main/resources/static/docs"
    }
}